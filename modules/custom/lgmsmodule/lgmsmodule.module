<?php

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_theme().
 */
function lgmsmodule_theme($existing, $type, $theme, $path) {
  return [
    'lgmsmodule_content' => [
      'variables' => ['table' => NULL],
      'template' => 'lgmsmodule-content',
    ],
  ];
}


/**
 * Creates a taxonomy vocabulary if it doesn't already exist.
 *
 * @param string $vid The machine name of the vocabulary.
 * @param string $name The human-readable name of the vocabulary.
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function create_vocab(string $vid, string $name): void {
  if (!\Drupal\taxonomy\Entity\Vocabulary::load($vid)) {
    $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::create([
      'vid' => $vid,
      'name' => $name,
    ]);
    $vocabulary->save();
  }
}


/**
 * Adds terms to a taxonomy vocabulary if they don't already exist.
 *
 * @param array $terms The terms to add.
 * @param string $vid The machine name of the vocabulary.
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function add_terms(array $terms, string $vid): void {
  foreach ($terms as $term_name) {
    // Check if the term already exists.
    $existing_terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['name' => $term_name, 'vid' => $vid]);

    if (empty($existing_terms)) {
      $new_term = \Drupal\taxonomy\Entity\Term::create([
        'vid' => $vid,
        'name' => $term_name,
      ]);
      $new_term->enforceIsNew();
      $new_term->save();
    }
  }
}

/**
 * Create mock guides.
 */
function create_mock_guides() {
  // Load term IDs for guide types.
  $type_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'lgms_guide_type']);
  $type_tids = array_keys($type_terms);

  // Load term IDs for guide subjects.
  $subject_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'lgms_guide_subject']);
  $subject_tids = array_keys($subject_terms);

  // Load term IDs for guide groups.
  $group_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'lgms_guide_group']);
  $group_tids = array_keys($group_terms);

  for ($i = 1; $i <= 50; $i++) {
    $guide_node = \Drupal\node\Entity\Node::create([
      'type' => 'guide',
      'title' => 'Guide ' . $i . ': ' . $subject_terms[array_rand($subject_tids)]->getName(),
      'field_guide_type' => ['target_id' => $type_tids[array_rand($type_tids)]],
      'field_guide_subject' => ['target_id' => $subject_tids[array_rand($subject_tids)]],
      'field_guide_group' => ['target_id' => $group_tids[array_rand($group_tids)]],
    ]);
    $guide_node->save();
  }
}

///**
// * @throws \Drupal\Core\Entity\EntityStorageException
// */
//function create_guide_field_storage() {
//  $field_storage = FieldStorageConfig::loadByName('node', 'field_guide_subject');
//  if (!$field_storage) {
//    FieldStorageConfig::create([
//      'field_name' => 'field_guide_subject',
//      'entity_type' => 'node',
//      'type' => 'entity_reference',
//      'settings' => [
//        'target_type' => 'taxonomy_term',
//      ],
//    ])->save();
//  }
//}
//
///**
// * @throws \Drupal\Core\Entity\EntityStorageException
// */
//function create_guide_field_instance() {
//  $field_instance = FieldConfig::loadByName('node', 'guide', 'field_guide_subject');
//  if (!$field_instance) {
//    FieldConfig::create([
//      'field_name' => 'field_guide_subject',
//      'entity_type' => 'node',
//      'bundle' => 'guide',
//      'label' => 'Subject Taxonomy',
//      'settings' => [
//        'handler' => 'default:taxonomy_term',
//        'handler_settings' => [
//          'target_bundles' => [
//            'LGMS Guide Subject' => 'LGMS Guide Subject',
//          ],
//        ],
//      ],
//    ])->save();
//  }
//}

/**
 * Creates or updates field storage and instance for a guide field.
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function create_guide_field_storage($field_name, $label, $vocabulary) {
  $field_storage = FieldStorageConfig::loadByName('node', $field_name);
  if (!$field_storage) {
    FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => 'entity_reference',
      'settings' => [
        'target_type' => 'taxonomy_term',
      ],
    ])->save();
  }

  $field_instance = FieldConfig::loadByName('node', 'guide', $field_name);
  if (!$field_instance) {
    FieldConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => 'guide',
      'label' => $label,
      'settings' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            $vocabulary => $vocabulary,
          ],
        ],
      ],
    ])->save();
  }
}

/**
 * Sets the form display configuration for a field.
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function set_form_display_config($field_name, $widget_type, $weight) {
  $form_display = EntityFormDisplay::load('node.guide.default');
  if (!$form_display) {
    $form_display = EntityFormDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => 'guide',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  $form_display->setComponent($field_name, [
    'type' => $widget_type,
    'weight' => $weight,
  ])->save();
}

/**
 * Implements hook_install().
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function lgmsModule_install() {

  // Create a new Guide Type taxonomy.
  create_vocab('LGMS Guide Type', 'Guide Type');

  // Add terms to the Guide Type taxonomy
  $terms = array(
    'General purpose Guide',
    'Subject Guide',
    'Topic Guide',
    'Course Guide',
  );
  add_terms($terms, 'LGMS Guide Type');


  // Create a new Guide Subject taxonomy.
  create_vocab('LGMS Guide Subject', 'Guide Subject');

  // Add terms to the Guide Subject taxonomy
  $terms = array(
    'Biology',
    'Psychology ',
    'Music',
    'Modern Languages',
    'Computer Science',
    'History',
    'Geography',
    'Philosophy',
    'Art and Design',
  );
  add_terms($terms, 'LGMS Guide Subject');


  // Create a new Guide Group taxonomy.
  create_vocab('LGMS Guide Group', 'Guide Group');

  // Add terms to the Guide Group taxonomy
  $terms = array(
    'Group 1',
    'Group 2',
    'Group 3',
    'Group 4',
  );
  add_terms($terms, 'LGMS Guide Group');

  // Create field storages and instances...
  create_guide_field_storage('field_guide_subject', 'Subject Taxonomy', 'LGMS Guide Subject');
  create_guide_field_storage('field_guide_type', 'Type Taxonomy', 'LGMS Guide Type');
  create_guide_field_storage('field_guide_group', 'Group Taxonomy', 'LGMS Guide Group');

  // Set form display configurations...
  set_form_display_config('field_guide_subject', 'options_select', 0);
  set_form_display_config('field_guide_type', 'options_select', 1);
  set_form_display_config('field_guide_group', 'options_select', 2);

}
