<?php
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\link\LinkItemInterface;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\views\Entity\View;

/**
 * Implements hook_theme().
 */
function lgmsmodule_theme($existing, $type, $theme, $path) {
  return [
    'lgmsmodule_content' => [
      'variables' => ['table' => NULL],
      'template' => 'lgmsmodule-content',
    ],
  ];
}

/**
 * This is executed when a node is created or updated.
 * This is used to generate URL aliases for guide and page nodes.
 * @param \Drupal\node\NodeInterface $node
 *   The node that is being inserted or updated.
 */
function lgmsmodule_generate_url_alias(NodeInterface $node) {
  // Alias generation for 'guide' content type remains the same.
  if ($node->getType() == 'guide') {
    $alias = '/' . strtolower(preg_replace('/[^a-z0-9]+/i', '-', $node->getTitle()));
  }
  // Alias generation for 'page' content type needs to reflect the parent-child relationship.
  elseif ($node->getType() == 'guide_page') {
    // Load the parent guide node.
    $parent_guide = $node->get('field_parent_guide')->entity;
    if ($parent_guide->bundle() == 'guide') {
      // Construct the alias using the parent guide's title and the page's title.
      $parent_alias = strtolower(preg_replace('/[^a-z0-9]+/i', '-', $parent_guide->getTitle()));
      $child_alias = strtolower(preg_replace('/[^a-z0-9]+/i', '-', $node->getTitle()));
      $alias = '/' . $parent_alias . '/' . $child_alias;
    } else if ($parent_guide->bundle() == 'guide_page'){
      $grand_parent_alies = strtolower(preg_replace('/[^a-z0-9]+/i', '-', $parent_guide->get('field_parent_guide')->entity->getTitle()));
      $parent_alias = strtolower(preg_replace('/[^a-z0-9]+/i', '-', $parent_guide->getTitle()));
      $child_alias = strtolower(preg_replace('/[^a-z0-9]+/i', '-', $node->getTitle()));
      $alias = '/' . $grand_parent_alies . '/' . $parent_alias . '/' . $child_alias;
    } else {
      // If there's no parent guide, fallback to just using the page title.
      $alias = '/' . strtolower(preg_replace('/[^a-z0-9]+/i', '-', $node->getTitle()));
    }
  } else {
    // If the content type is neither 'guide' nor 'page', do nothing.
    return;
  }

  // Trim leading or trailing hyphens from the alias.
  $alias = trim($alias, '-');

  // Check if the alias already exists.
  $path_alias_repository = \Drupal::service('path_alias.repository');
  $existing_alias = $path_alias_repository->lookupByAlias($alias, $node->language()->getId());

  // If the alias does not exist or it's not the current node's alias, create or update it.
  if (!$existing_alias || $existing_alias['path'] !== '/node/' . $node->id()) {
    // Create a new alias or update the existing one.
    $path_alias_storage = \Drupal::entityTypeManager()->getStorage('path_alias');
    $path_alias = $path_alias_storage->create([
      'path' => '/node/' . $node->id(),
      'alias' => $alias,
      'langcode' => $node->language()->getId(),
    ]);
    $path_alias->save();
  }
}

/**
 * Implements hook_block_access().
 */
function lgmsmodule_block_access(\Drupal\block\BlockInterface $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
  // Get the current route.
  $current_route = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');
  $routes = [
    'entity.node.edit_form',
    'entity.node.delete_form',
    'entity.node.version_history',
    'entity.node.devel_load',
    'entity.node.devel_load_with_references',
    'entity.node.devel_render',
    'entity.node.devel_definition',
  ];


  // Check if the current route is for a node edit form.
  if ($node && $node->getType() == 'guide' && in_array($current_route, $routes) && $block->id() === 'lgmsguideownerblock') {
    // Block access to the block on node edit pages.
    return \Drupal\Core\Access\AccessResult::forbidden();
  }

  // Allow access to the block for other routes.
  return \Drupal\Core\Access\AccessResult::allowed();
}

/**
 * Implements hook_preprocess_page().
 */
function lgmsmodule_preprocess_page(&$variables) {
  // Check if the current page is a guide node
  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    if ($node->getType() == 'guide') {
      $variables['#attached']['library'][] = 'lgmsmodule/lgmsmodule';
    }
  }
}

/**
 * Creates a taxonomy vocabulary if it doesn't already exist.
 *
 * @param string $vid The machine name of the vocabulary.
 * @param string $name The human-readable name of the vocabulary.
 * @param string $description The description of the vocabulary.
 * @return void
 * @throws EntityStorageException
 */
function create_vocab(string $vid, string $name, string $description): void {
  $vocabulary = Vocabulary::create([
    'vid' => $vid,
    'name' => $name,
    'description' => $description,
  ]);
  $vocabulary->save();
}


/**
 * Adds terms to a taxonomy vocabulary if they don't already exist.
 *
 * @param array $terms The terms to add.
 * @param string $vid The machine name of the vocabulary.
 * @return void
 * @throws EntityStorageException
 */
function add_terms(array $terms, string $vid): void {
  foreach ($terms as $term_name) {
    $new_term = Term::create([
      'vid' => $vid,
      'name' => $term_name,
    ]);
    $new_term->enforceIsNew();
    $new_term->save();
  }
}


/**
 * Helper function to create content types.
 * @throws EntityStorageException
 */
function createContentType($id, $name, $desc = ''): void
{
  $type = NodeType::load($id);
  if (!$type) {
    $type = NodeType::create([
      'type' => $id,
      'name' => $name,
      'description' => $desc,
    ]);
    $type->save();
  }
}

/**
 * Helper function to create fields.
 * @throws EntityStorageException
 */
function createField($field_id, $entity_type, $bundle, $field_name, $field_type, $storage_settings, $field_settings, $widget_type, $widget_settings, $status, $cardinal, $field_weight, $desc): void
{
  // Create field storage.
  $storage = FieldStorageConfig::loadByName($entity_type, $field_id);
  if (!$storage) {
    $storage = FieldStorageConfig::create([
      'field_name' => $field_id,
      'entity_type' => $entity_type,
      'type' => $field_type,
      'settings' => $storage_settings ?? [],
    ]);

    if ($cardinal){
      $storage->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
    }

    $storage->save();
  }

  // Create field.
  $field = FieldConfig::loadByName($entity_type, $bundle, $field_id);
  if (!$field) {
    $field = FieldConfig::create([
      'field_storage' => $storage,
      'bundle' => $bundle,
      'label' => $field_name,
      'settings' => $field_settings ?? [],
    ]);
    if (!empty($desc)){
      $field->setDescription($desc);
    }
    $field->save();

    // Configure form display.
    $form_display = EntityFormDisplay::load($entity_type . '.' . $bundle . '.default');
    if (!$form_display) {
      $form_display = EntityFormDisplay::create([
        'targetEntityType' => $entity_type,
        'bundle' => $bundle,
        'mode' => 'default',
        'status' => TRUE,
      ]);
    }
    $form_display->setComponent($field_id, [
      'type' => $widget_type,
      'settings' => $widget_settings,
      'weight'=> $field_weight,
    ])->save();

    // Configure view display.
    $view_display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.default');
    if (!$view_display) {
      $view_display = EntityViewDisplay::create([
        'targetEntityType' => $entity_type,
        'bundle' => $bundle,
        'mode' => 'default',
        'status' => TRUE,
      ]);
    }

    // Remove the field from the view display.
    if ($view_display->getComponent($field_id)) {
      $view_display->removeComponent($field_id);
      $view_display->save();
    }
  }
}

/**
 * This is executed when a node is created
 * Implements hook_node_insert().
 */
function lgmsmodule_node_insert(NodeInterface $node): void
{
  lgmsmodule_refresh_cache($node);
  lgmsmodule_generate_url_alias($node);
}

/**
 * This is executed when a node is updated
 * Implements hook_node_update().
 */
function lgmsmodule_node_update(NodeInterface $node): void
{
  if($node->bundle() === 'guide_page'){
    // Check if the entity is a 'guide_page' and has the field 'field_reference_node'.
    \Drupal::logger('my_module')->notice('<pre>' . print_r($node->id(), TRUE) . '</pre>');
    if ($node->getEntityTypeId() === 'node' && $node->bundle() === 'guide_page' && $node->hasField('field_reference_node')) {
      \Drupal::logger('my_module')->notice('<pre>' . print_r($node->id(), TRUE) . '</pre>');
      // Proceed to update referencing guide pages.
      update_referencing_guide_pages($node);
    }
  }

  lgmsmodule_refresh_cache($node);
}

/**
 * Helper function to refresh cache.
 */
function lgmsmodule_refresh_cache(NodeInterface $node): void
{
  if ($node->bundle() === 'guide_box') {
    // Get the 'parent_page' ID from the 'guide_box'
    $parent_page_id = $node->get('field_parent_node')->target_id;

    // Clear the cache of the page
    if ($parent_page_id) {
      $custom_cache_tag = 'lgmsmodule_node_view:' . $parent_page_id;
      \Drupal::service('cache_tags.invalidator')->invalidateTags([$custom_cache_tag]);
    }

    // Clear the cache of the guide
    $parent_page = Node::load($parent_page_id);
    lgmsmodule_refresh_cache($parent_page);
  } elseif ($node->bundle() === 'guide_page') {
    // Invalidate cache for 'guide_page' as before
    $parent_guide_id = $node->get('field_parent_guide')->target_id;

    if ($parent_guide_id) {
      $custom_cache_tag = 'lgmsmodule_node_view:' . $parent_guide_id;
      \Drupal::service('cache_tags.invalidator')->invalidateTags([$custom_cache_tag]);
    }
  }
}

function build_item(EntityInterface $entity, EntityInterface $box, EntityInterface $item): array
{
  $unpublished_class = '';
  if(!$item->isPublished()){
    if(!\Drupal::currentUser()->isAuthenticated()){
      return [];
    }
    $unpublished_class = 'node--unpublished';
  }

  $item_container = [
    '#type' => 'container',
    '#attributes' => ['class' => ['guide-item ' . $unpublished_class]],
  ];

  $edit_route = '';
  $delete_route = '';//add_database.form

  if ($item->hasField('field_html_item') && !$item->get('field_html_item')->isEmpty()) {
    $html = $item->get('field_html_item')->entity;

    $item_container['content'][] = [
      '#type' => 'processed_text',
      '#text' => $html->get('field_text_box_item2')->value,
      '#format' => $html->get('field_text_box_item2')->format,
    ];

    $edit_route = 'AddHTMLForm';
    $delete_route = 'delete_html.form';
  }
  elseif ($item->hasField('field_book_item') && !$item->get('field_book_item')->isEmpty()) {
    $html = $item->get('field_book_item')->entity;

    $item_container['content'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attached' => [
        'library' => [
          'lgmsmodule/lgmsmodule',
        ],
      ],
      '#attributes' => [
        'class' => 'book-container',
      ],
    ];

    $cover_picture = $html->get('field_book_cover_picture')?->entity;
    $cover_picture_uri = $cover_picture?->getFileUri();
    if($cover_picture_uri) {
      $item_container['content']['image'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => 'book-cover-picture-container',
        ],
      ];

      $item_container['content']['image'][] = [
        '#theme' => 'image',
        '#uri' => $cover_picture_uri,
        '#attributes' => [
          'class' => 'book-cover-picture'
        ],
      ];
    }

    $item_container['content']['details'] = [
      '#type' => 'container', // Using a container for the render array
      '#attributes' => [
        'class' => 'book-details', // Render array takes remaining space
      ],
    ];

    $item_container['content']['details'][] = [
      '#markup' => '<strong>' . $html->get('title')->value . '</strong>',
    ];

    $item_container['content']['details'][] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => 'by ' . $html->get('field_book_author_or_editor')->value,
    ];

    $item_container['content']['details'][] = [
      '#markup' => '<p><i> Publisher: ' . $html->get('field_book_publisher')->value . ', Edition: ' . $html->get('field_book_edition')->value . ', Year: ' . $html->get('field_book_year')->value. '</i></p>',
    ];

    $item_container['content']['details'][] = [
      '#type' => 'processed_text',
      '#text' => $html->get('field_book_description')->value,
      '#format' => $html->get('field_book_description')->format,
    ];

    $item_container['content']['details'][] = [
      '#markup' => '<div>URL: <a href="' . $html->get('field_book_url')->uri . '">' . $html->get('title')->value . '</a></div>'
    ];

    if(Term::load($html->get('field_book_type')->target_id)->getName() == 'print') {
      $item_container['content']['details'][] = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => 'Location: '. $html->get('field_book_location')->value,
      ];

      $item_container['content']['details'][] = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#value' => 'Call Number: '. $html->get('field_book_call_number')->value,
      ];

      $item_container['content']['details'][] = [
        '#markup' => '<div>Cat Record: <a href="' . $html->get('field_book_cat_record')->uri . '">' . $html->get('field_book_cat_record')->title . '</a></div>'
      ];
    }
    else {
      $item_container['content']['details'][] = [
        '#markup' => '<div>Pub Finder: <a href="' . $html->get('field_book_pub_finder')->uri . '">' . $html->get('field_book_pub_finder')->title . '</a></div>'
      ];
    }

    $edit_route = 'AddBookForm';
    $delete_route = 'delete_book.form';
  }
  elseif ($item->hasField('field_database_item') && !$item->get('field_database_item')->isEmpty()) {
    $database = $item->get('field_database_item')->entity;
    $link = $database->get('field_database_link')->first()->getValue();

    //$item_container['content'][] = \Drupal::entityTypeManager()->getViewBuilder('node')->view($database, 'full');
    $item_container['content'][] = [
      '#type' => 'link',
      '#title' => $link['title'],
      '#url' => Url::fromUri($link['uri']),
    ];

    $item_container['content'][] = [
      '#type' => 'markup',
      '#markup' => $item->get('field_description')->value,
    ];

    $edit_route = 'add_database.form';
    $delete_route = 'delete_database.form';
  }
  elseif ($item->hasField('field_media_image') && !$item->get('field_media_image')->isEmpty()) {
    $media = $item->get('field_media_image')->entity;
    $media_type = $media->bundle();
    $media_item = \Drupal::entityTypeManager()->getViewBuilder('media')->view($media, 'full');

    if ($media_type == 'remote_video'){
      $standard_video_url = $media->get('field_media_oembed_video')->value;
      $parsed_url = parse_url($standard_video_url);

      if (isset($parsed_url['host']) &&
        (str_contains($parsed_url['host'], 'youtube.com') || str_contains($parsed_url['host'], 'youtu.be'))) {

        // Extract the video ID if it is a YouTube URL.
        parse_str($parsed_url['query'], $query);
        if (isset($query['v'])) {
          $video_id = $query['v'];
        } else {
          // This is for the youtu.be short URL which doesn't have a query parameter.
          $video_id = ltrim($parsed_url['path'], '/');
        }

        $embed_url = "https://www.youtube.com/embed/{$video_id}";

        $media_item = [
          '#type' => 'html_tag',
          '#tag' => 'iframe',
          '#attributes' => [
            'src' => $embed_url,
            'frameborder' => '0',
            'allowfullscreen' => 'allowfullscreen',
            'width' => '640',
            'height' => '360',
          ],
        ];
      }
    }

    $item_container['content'][] = $media_item;
/*
    switch ($media_type) {
      case 'image':
        $file = $media->get('field_media_image')->entity;
        if ($file) {
          $image_url = \Drupal\image\Entity\ImageStyle::load('thumbnail')->buildUrl($file->getFileUri());
          $item_container['content'][] = [
            '#type' => 'html_tag',
            '#tag' => 'img',
            '#attributes' => ['src' => $image_url],
          ];
        }
        break;
      case 'video':
        $video_file = $media->get('field_media_video_file')->entity;
        if ($video_file) {
          // Get the URI of the video file
          $video_uri = $video_file->getFileUri();

          // Convert the URI to a URL
          $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
          $video_url = $stream_wrapper_manager->getViaUri($video_uri)->getExternalUrl();

          // Add video rendering logic here
          $item_container['content'][] = [
            '#type' => 'html_tag',
            '#tag' => 'video',
            '#attributes' => [
              'src' => $video_url,
              'controls' => true,
              'width' => '640', // Adjust the width as necessary
              'height' => '360', // Adjust the height as necessary
            ],
            '#value' => t('Your browser does not support the video tag.'),
          ];
        }
        break;
      case 'remote_video':
        $standard_video_url = $media->get('field_media_oembed_video')->value;

        parse_str(parse_url($standard_video_url, PHP_URL_QUERY), $query);
        $video_id = $query['v'];

        $embed_url = "https://www.youtube.com/embed/{$video_id}";

        $item_container['content'][] = [
          '#type' => 'html_tag',
          '#tag' => 'iframe',
          '#attributes' => [
            'src' => $embed_url,
            'frameborder' => '0',
            'allowfullscreen' => 'allowfullscreen',
            'width' => '640',
            'height' => '360',
          ],
        ];
        break;
      case 'audio':
        // Similar handling for audio files
        $audio_file = $media->get('field_media_audio_file')->entity;
        if ($audio_file) {
          // Get the URI of the audio file
          $audio_uri = $audio_file->getFileUri();

          // Convert the URI to a URL
          $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
          $audio_url = $stream_wrapper_manager->getViaUri($audio_uri)->getExternalUrl();

          // Add audio rendering logic here
          $item_container['content'][] = [
            '#type' => 'html_tag',
            '#tag' => 'audio',
            '#attributes' => [
              'src' => $audio_url,
              'controls' => 'controls',
            ],
            '#attached' => [
              'library' => [
                'core/html5shiv',
              ],
            ],
          ];
        }
        break;
      case 'document':
        // Handling for generic file downloads
        $file = $media->get('field_media_document')->entity;
        if ($file) {
          $file_uri = $file->getFileUri();
          $file_url = \Drupal::service('stream_wrapper_manager')->getViaUri($file_uri)->getExternalUrl();

          $item_container['content'][] = [
            '#type' => 'link',
            '#title' => $file->label(),
            '#url' => Url::fromUri($file_url),
            '#attributes' => ['target' => '_blank'],
          ];
        }
        break;
      default:
        // Default case to handle any other media types not explicitly covered above
        // For example, you might simply display the media name or a generic icon
        $item_container['content'][] = ['#markup' => $media->label()];
        print_r('url ');
        break;
    }*/
    $edit_route = 'add_media.form';
    $delete_route = 'delete_database.form';
  }
  else {
    return [];
  }

  if($item->access('update') && !$entity->hasField('field_reference_node') || $entity->get('field_reference_node')->isEmpty() && $entity->id() === $box->get('field_parent_node')->entity->id()) {
    if ($box->id() === $item->get('field_parent_box')->entity->id()){
      $ids = [ 'current_node' => $entity->id(), 'current_box' => $box->id(), 'current_item' => $item->id()];
      $json_data = json_encode($ids);
      $ids = urlencode($json_data);

      $url = '';

      if ($edit_route == 'AddHTMLForm'){
        $array_of_objects = [(object)['name' => 'Edit HTML', 'form' => $edit_route]];
        $json_data = json_encode($array_of_objects);
        $query_param = urlencode($json_data);
        $url =  Url::fromRoute('lgmsmodule.popup_modal', [], ['query' => ['ids' => $ids, 'forms' => $query_param]]);
      }
      else if($edit_route == 'AddBookForm'){
        $array_of_objects = [(object)['name' => 'Edit Book', 'form' => $edit_route]];
        $json_data = json_encode($array_of_objects);
        $book_query_param = urlencode($json_data);
        $url =  Url::fromRoute('lgmsmodule.popup_modal', [], ['query' => ['ids' => $ids, 'forms' => $book_query_param]]);
      }
      else {
        $url = Url::fromRoute($edit_route, [], ['query' => [
          'current_node' => $entity->id(),
          'current_box' => $box->id(),
          'current_item' => $item->id()]
        ]);
      }

      $edit_link = [
        '#type' => 'link',
        '#title' => [
          '#type' => 'html_tag',
          '#tag' => 'i',
          '#attributes' => [
            'class' => ['fa', 'fa-edit', 'edit-icon'],
          ],
        ],
        '#url' => $url,
        '#attributes' => [
          'class' => ['use-ajax'],
          'data-dialog-type' => 'modal',
          'data-dialog-options' => Json::encode(['width' => 800]),
          'title' => 'Edit Item',
          'style' => 'text-decoration: none;',
        ],
      ];

      $item_container['edit_link'] = $edit_link;
    }

    $url = Url::fromRoute($delete_route, [], ['query' => [
      'current_node' => $entity->id(),
      'current_box' => $box->id(),
      'current_item' => $item->id()]
    ]);

    $delete_link = [
      '#type' => 'link',
      '#title' => [
        '#type' => 'html_tag',
        '#tag' => 'i',
        '#attributes' => [
          'class' => ['fa', 'fa-times', 'close-icon'],
        ],
      ],
      '#url' => $url,
      '#attributes' => [
        'class' => ['use-ajax'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode(['width' => 800]),
        'title' => 'Edit Item',
        'style' => 'text-decoration: none;',
      ],
    ];
    $item_container['delete_link'] = $delete_link;
  }

  return $item_container;
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function lgmsmodule_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if($entity->bundle() === 'guide_database_item' && $view_mode === 'full'){
    $build['db_title'] = [
      '#type' => 'markup',
      '#markup' => t('<h1><strong>'.$entity->label() . '</h1></strong>'),
    ];

    if (!$entity->get('field_database_link')->isEmpty()) {
      // Fetch the first item of the field_database_link field
      $link_item = $entity->get('field_database_link')->first();
      // Get the URL from the link field
      $url = $link_item->getUrl()->toString();
      // Get the link title (text) from the link field, fall back to the URL if the title is empty
      $link_text = $link_item->title ?: $url;

      $build['db_link'] = [
        '#type' => 'markup',
        '#markup' => '<h3><div class="link-icon"><i class="fa fa-link" aria-hidden="true"></i> <a href="' . $url . '">' . $link_text . '</a></div></h3>',
      ];

    }

    if (!$entity->get('field_database_body')->isEmpty()) {
      $body_value = $entity->get('field_database_body')->value;
      $build['db_body'] = [
        '#type' => 'markup',
        '#markup' => '<div>' . $body_value . '</div>',
      ];
    }
  }

  if (($entity->bundle() === 'guide' || $entity->bundle() === 'guide_page') && $view_mode === 'full') {
    $build['#attached']['library'][] = 'lgmsmodule/lgmsmodule';
    $build['#attached']['library'][] = 'core/drupal.dialog.ajax';

    $reference_page = true;

    if(!$entity->hasField('field_reference_node') || $entity->get('field_reference_node')->isEmpty()){
      $reference_page = false;
    }

    // Add a custom cache tag to the build array
    $custom_cache_tag = 'lgmsmodule_node_view:' . $entity->id();
    $build['#cache']['tags'][] = $custom_cache_tag;

    $title = $entity->label();
    $description = $entity->get("field_description")->value;

    if($entity->get('field_hide_description')->value){
      $description = '';
    }

    // Concatenate the title, a horizontal divider, and the description.
    // The <hr> tag is used as the divider between the title and description.
    $build['guide_print'][] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['guide-box-2container']],
      'title_wrapper' => [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => ['title-edit2-wrapper'],
        ],
        'title' => [
          '#type' => 'html_tag',
          '#tag' => 'h3',
          '#value' => '<h1>'.$title . '</h1>',
          '#attributes' => ['class' => ['guide-box-title']],
        ],
        'icons' => $entity->getType() == 'guide' ? [
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => [
            'class' => ['icons-container'],
          ],
          'print_icon' => [
            '#type' => 'link',
            '#title' => [
              '#type' => 'html_tag',
              '#tag' => 'i',
              '#attributes' => [
                'class' => \Drupal::currentUser()->isAuthenticated()? ['fa', 'fa-print'] : ['fa', 'fa-print', 'print_icon'],
              ],
            ],
            '#url' => Url::fromRoute('lgmsmodule.download_guide', ['node' => $entity->id()]),
            '#attributes' => [
              'title' => 'Print Guide',
              'style' => 'text-decoration: none;',
            ],
          ],
        ] : [],
      ],
      'body' => [
        '#type' => 'markup',
        '#markup' => $description, // Ensure $description is properly sanitized and safe HTML
      ],
    ];


    $build['boxes']['#attached']['library'][] = 'lgmsmodule/fontawesome';

    $boxes = $entity->get('field_child_boxes')->referencedEntities();

    foreach ($boxes as $box) {
      $unpublished_class = '';
      if(!$box->isPublished()){
        if(!\Drupal::currentUser()->isAuthenticated()){
          continue;
        }
        $unpublished_class = 'node--unpublished';
      }

      $items = $box->get('field_box_items')->referencedEntities();

      $guide_box_build['items'] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['guide-box-items-container']],
      ];

      foreach ($items as $item) {
        // Add the item container to the guide box items.
        $guide_box_build['items'][] = build_item($entity, $box, $item);
      }

      $ids = ['current_box' => $box->id(), 'current_node' => $entity->id()];
      $json_data = json_encode($ids);
      $ids = urlencode($json_data);

      $array_of_objects = [(object)['name' => 'Add HTML', 'form' => 'AddHTMLForm'],(object) ['name' => 'Reuse HTML', 'form' => 'ReuseHTMLItemForm']];
      $json_data = json_encode($array_of_objects);
      $html_query_param = urlencode($json_data);

      $array_of_objects = [(object)['name' => 'Add Book', 'form' => 'AddBookForm'],(object) ['name' => 'Reuse Book', 'form' => 'ReuseBookForm']];
      $json_data = json_encode($array_of_objects);
      $book_query_param = urlencode($json_data);

      if($box->access('update') && !$reference_page) {
        $guide_box_build['items_list'] = [
          '#type' => 'container',
          '#attributes' => ['id' => 'add-reorder-list', 'class' => ['guide-item2']],
          'children' => [
            'html_item' => [
              '#type' => 'html_tag',
              '#tag' => 'li',
              'content' => [
                '#type' => 'link',
                '#title' => ('Add/Reuse HTML'),
                '#url' => Url::fromRoute('lgmsmodule.popup_modal', [], ['query' => ['ids' => $ids, 'forms' => $html_query_param]]),
                '#attributes' => [
                  'class' => ['use-ajax'],
                  'data-dialog-type' => 'modal',
                  'data-dialog-options' => Json::encode(['width' => 800]),
                  'title' => 'Re-position Box',
                  'style' => 'text-decoration: none;',
                ],
              ],
            ],
            'book_item' => [
              '#type' => 'html_tag',
              '#tag' => 'li',
              'content' => [
                '#type' => 'link',
                '#title' => ('Add/Reuse Book'),
                '#url' => Url::fromRoute('lgmsmodule.popup_modal', [], ['query' => ['ids' => $ids, 'forms' => $book_query_param]]),
                '#attributes' => [
                  'class' => ['use-ajax'],
                  'data-dialog-type' => 'modal',
                  'data-dialog-options' => Json::encode(['width' => 800]),
                  'title' => 'Re-position Box',
                  'style' => 'text-decoration: none;',
                ],
              ],
            ],
            'database_item' => [
              '#type' => 'html_tag',
              '#tag' => 'li',
              'content' => [
                '#type' => 'link',
                '#title' => ('Database'),
                '#url' => Url::fromRoute('add_database.form', [], ['query' => ['current_box' => $box->id(), 'current_node' => $entity->id()]]),
                '#attributes' => [
                  'class' => ['use-ajax'],
                  'data-dialog-type' => 'modal',
                  'data-dialog-options' => Json::encode(['width' => 800]),
                  'title' => 'Re-position Box',
                  'style' => 'text-decoration: none;',
                ],
              ],
            ],
            'media_item' => [
              '#type' => 'html_tag',
              '#tag' => 'li',
              'content' => [
                '#type' => 'link',
                '#title' => ('Media'),
                '#url' => Url::fromRoute('add_media.form', [], ['query' => ['current_box' => $box->id(), 'current_node' => $entity->id()]]),
                '#attributes' => [
                  'class' => ['use-ajax'],
                  'data-dialog-type' => 'modal',
                  'data-dialog-options' => Json::encode(['width' => 800]),
                  'title' => 'Re-position Box',
                  'style' => 'text-decoration: none;',
                ],
              ],
            ],
            're-order' => [
              '#type' => 'html_tag',
              '#tag' => 'li',
              'content' => [
                '#type' => 'link',
                '#title' => t('Re-Order'),
                '#url' => Url::fromRoute('re_order_box_item.form', [], ['query' => ['current_box' => $box->id(), 'current_node' => $entity->id()]]),
                '#attributes' => [
                  'class' => ['use-ajax'],
                  'data-dialog-type' => 'modal',
                  'data-dialog-options' => Json::encode(['width' => 800]),
                  'title' => 'Re-position Box',
                  'style' => 'text-decoration: none;',
                ],
              ],
            ],
          ],
        ];
      }

      $build['boxes'][] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['guide-box-container ' . $unpublished_class]],
        'title_wrapper' => [
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => [
            'class' => ['title-edit-wrapper ' . $unpublished_class],
          ],
          'title' => [
            '#type' => 'html_tag',
            '#tag' => 'h3',
            '#value' => $box->label(),
            '#attributes' => ['class' => ['guide-box-title']],
          ],
          'icons' => $box->access('update') && !$reference_page ?[
            '#type' => 'html_tag',
            '#tag' => 'div',
            '#attributes' => [
              'class' => ['icons-container'],
            ],
            're_order_icon' => [
              '#type' => 'link',
              '#title' => [
                '#type' => 'html_tag',
                '#tag' => 'i',
                '#attributes' => [
                  'class' => ['fa', 'fa-bars', 're-order-icon'],
                ],
              ],
              '#url' => Url::fromRoute('re_order_guide_box.form', [], ['query' => ['current_node' => $entity->id()]]),
              '#attributes' => [
                'class' => ['use-ajax'],
                'data-dialog-type' => 'modal',
                'data-dialog-options' => Json::encode(['width' => 800]),
                'title' => 'Re-position Box',
                'style' => 'text-decoration: none;',
              ],
            ],
            'edit_icon' => [
              '#type' => 'link',
              '#title' => [
                '#type' => 'html_tag',
                '#tag' => 'i',
                '#attributes' => [
                  'class' => ['fa', 'fa-edit', 'edit-icon'],
                ],
              ],
              '#url' => Url::fromRoute('edit_guide_box.form', [], ['query' => ['current_node' => $entity->id(), 'current_box' =>$box->id()]]),
              '#attributes' => [
                'class' => ['use-ajax'],
                'data-dialog-type' => 'modal',
                'data-dialog-options' => Json::encode(['width' => 800]),
                'title' => 'Edit Box',
                'style' => 'text-decoration: none;',
              ],
            ],
            'close_icon' => [
              '#type' => 'link',
              '#title' => [
                '#type' => 'html_tag',
                '#tag' => 'i',
                '#attributes' => [
                  'class' => ['fa', 'fa-times', 'close-icon'],
                ],
              ],
              '#url' => Url::fromRoute('delete_guide_box.form', [], ['query' => ['current_node' => $entity->id(), 'current_box' =>$box->id()]]),
              '#attributes' => [
                'class' => ['use-ajax'],
                'data-dialog-type' => 'modal',
                'data-dialog-options' => Json::encode(['width' => 800]),
                'title' => 'Delete Box',
                'style' => 'text-decoration: none;',
              ],
            ],
          ] : [],
        ],
        'body' => $guide_box_build,
      ];

    }
    if(\Drupal::currentUser()->isAuthenticated() && !$reference_page) {
      // Generate the URL for the custom form route, including the query parameter for the current guide.
      $array_of_objects = [(object)['name' => 'Create Guide Box', 'form' => 'CreateGuideBoxForm'],(object) ['name' => 'Reuse Guide Box', 'form' => 'ReuseGuideBoxForm']];
      $json_data = json_encode($array_of_objects);
      $query_param = urlencode($json_data);

      $ids = ['current_node' => $entity->id()];
      $json_data = json_encode($ids);
      $ids = urlencode($json_data);

      $url = Url::fromRoute('lgmsmodule.popup_modal', [], ['query' => ['ids' => $ids, 'forms' => $query_param]]);

      // Create the link render array with AJAX attributes.
      $link = Link::fromTextAndUrl(t('Create/Reuse Guide Box'), $url)->toRenderable();
      $link['#attributes'] = [
        'class' => ['use-ajax'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode(['width' => 800]),
      ];

      // Render the link somewhere in your build array.
      $build['guide_box_modal'] = $link;
    }

    $last_changed_timestamp = $entity->getChangedTime();

    $last_changed_formatted = \Drupal::service('date.formatter')->format($last_changed_timestamp, 'medium');

    $build['last_changed'] = [
      '#markup' => "<p>Last updated: {$last_changed_formatted}</p>",
    ];

  }
}

/**
 * Implements hook_install().
 * @throws EntityStorageException
 */
function lgmsModule_install(): void
{
  \Drupal::configFactory()->getEditable('lgmsmodule.settings')
    ->set('proxy_prefix', 'https://proxy.library.xxx.xx/login?url=')
    ->save();

  // Get the default theme.
  $default_theme = \Drupal::config('system.theme')->get('default');

  $block_id = 'lgmsguideownerblock';

  if (!\Drupal\block\Entity\Block::load($block_id)) {
    $block = \Drupal\block\Entity\Block::create([
      'id' => $block_id,
      'theme' => $default_theme,
      'region' => 'sidebar_first',
      'weight' => 0,
      'provider' => 'lgmsmodule',
      'plugin' => 'lgms_guide_owner_block',
      'label' => 'LGMS Guide Owner Block',
      'label_display' => 'visible',
      'visibility' => [
        'entity_bundle:node' => [
          'id' => 'entity_bundle:node',
          'bundles' => [
            'guide' => 'guide',
            'guide_page' => 'guide_page',
          ],
          'negate' => FALSE,
          'context_mapping' => [
            'node' => '@node.node_route_context:node',
          ],
        ],
      ],
    ]);

    $block->save();

    // After the block->save() call.
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['block_list']);
    \Drupal::service('router.builder')->rebuild();

    \Drupal::messenger()->addMessage('LGMS Guide Owner Block placed successfully.');
  } else {
    \Drupal::messenger()->addMessage('The LGMS Guide Owner Block already exists.');
  }

  $block_id = 'pageviewblock';
  if (!\Drupal\block\Entity\Block::load($block_id)) {
    $block = \Drupal\block\Entity\Block::create([
      'id' => $block_id,
      'theme' => $default_theme,
      'region' => 'sidebar_first',
      'weight' => 1,
      'provider' => 'lgmsmodule',
      'plugin' => 'page_view_block',
      'label' => 'LGMS page view Block',
      'label_display' => 'visible',
      'visibility' => [
        'entity_bundle:node' => [
          'id' => 'entity_bundle:node',
          'bundles' => [
            'guide' => 'guide',
            'guide_page'=>'guide_page',
          ],
          'negate' => FALSE,
          'context_mapping' => [
            'node' => '@node.node_route_context:node',
          ],
        ],
      ],
    ]);

    $block->save();
    \Drupal::messenger()->addMessage('LGMS Page View Block placed successfully.');
  } else {
    \Drupal::messenger()->addMessage('The LGMS Page View Block already exists.');
  }

  // Create content types with brief descriptions.
  createContentType('guide', 'Guide', 'Comprehensive collections of resources on specific subjects.');
  createContentType('guide_page', 'Guide Page', 'Segments within a Guide for organizing content.');
  createContentType('guide_box', 'Guide Box', 'Containers within Guide Pages for grouping related items.');
  createContentType('guide_item', 'Guide Box Item', 'Generic items within Guide Boxes.');
  createContentType('guide_html_item', 'HTML Box Item', 'Embeddable HTML content within Guide Boxes.');
  createContentType('guide_database_item', 'Database Box Item', 'Links to databases within Guide Boxes.');
  createContentType('guide_book_item', 'Book Box Item', 'References to books within Guide Boxes.');


  // Create a new Guide Type taxonomy.
  create_vocab('LGMS_Guide_Type', 'Guide Type', 'Use Guide Type to group guides by their type');

  // Add terms to the Guide Type taxonomy
  $terms = array(
    'General purpose Guide',
    'Subject Guide',
    'Topic Guide',
    'Course Guide',
  );
  add_terms($terms, 'LGMS_Guide_Type');

  // Create a new Guide Subject taxonomy.
  create_vocab('LGMS_Guide_Subject', 'Guide Subject', 'Use Guide Subject to group guides related to each other under the same category');

  // Add terms to the Guide Subject taxonomy
  $terms = array(
    'Anthropology',
    'Biology ',
    'Biotechnology',
    'Business & Management',
    'Chemistry',
    'Communication & Mass Media',
    'Computer Science',
    'Drama & Theater Arts',
    'Earth & Atmospheric Sciences',
    'Economics',
    'Education',
    'Engineering',
    'Environmental Sciences',
    'Ethnic & Cultural Studies',
    'Geography & Cartography',
    'Health & Medicine',
    'History',
    'Language & Linguistics',
    'Law',
    'Library & Information Science',
    'Literature & Writing',
    'Marketing',
    'Mathematics',
    'Music',
    'Nursing & Allied Health',
    'Nutrition & Dietetics',
    'Physics',
    'Political Science',
    'Politics & Government',
    'Psychology',
    'Religion & Philosophy',
    'Science',
    'Sociology',
    'Sports & Leisure',
    'Sports Medicine',
    'Veterinary Medicine',
    'Visual Arts',
    'Women\'s Studies & Feminism',
  );
  add_terms($terms, 'LGMS_Guide_Subject');

  // Create a new Guide Group taxonomy.
  create_vocab('LGMS_Guide_Group', 'Guide Group', 'Use Guide Group to assign a guide to a specific group and.');

  // Add terms to the Guide Group taxonomy
  $terms = array(
    'Group 1',
    'Group 2',
    'Group 3',
    'Group 4',
  );
  add_terms($terms, 'LGMS_Guide_Group');

  // Create field storages and instances...
  createField(
    'field_lgms_guide_subject',
    'node',
    'guide',
    'Subject',
    'entity_reference',
    ['target_type' => 'taxonomy_term',],
    ['handler' => 'default:taxonomy_term',
      'handler_settings' => [
        'target_bundles' => [
          'LGMS_Guide_Subject' => 'LGMS_Guide_Subject',
        ],
      ],
    ],
    'options_buttons',
    [],
    False,
    True,
    3,
    ''
  );

  createField(
    'field_lgms_guide_type',
    'node',
    'guide',
    'Type',
    'entity_reference',
    ['target_type' => 'taxonomy_term',],
    ['handler' => 'default:taxonomy_term',
      'handler_settings' => [
        'target_bundles' => [
          'LGMS_Guide_Subject' => 'LGMS_Guide_Type',
        ],
      ],
    ],
    'options_select',
    ['weight' => 1],
    False,
    False,
    4,
    ''
  );

  createField(
    'field_lgms_guide_group',
    'node',
    'guide',
    'Group',
    'entity_reference',
    ['target_type' => 'taxonomy_term',],
    ['handler' => 'default:taxonomy_term',
      'handler_settings' => [
        'target_bundles' => [
          'LGMS_Guide_Subject' => 'LGMS_Guide_Group',
        ],
      ],
    ],
    'options_select',
    ['weight' => 2],
    False,
    False,
    5,
    ''
  );

  // Guide Description field
  createField(
    'field_description',
    'node',
    'guide',
    'Description',
    'text_long',
    [],
    [],
    'text_textarea',
    [],
    False,
    False,
    2,
    ''
  );

// Add a reference field to Guide content type on Guide Page.
  createField(
    'field_parent_guide',
    'node',
    'guide_page',
    'Parent Guide',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide' => 'guide',
          'guide_page' => 'guide_page',
        ],
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False,
    1,
    ''
  );

  createField(
    'field_parent_node',
    'node',
    'guide_box',
    'Parent node',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide' => 'guide',
          'guide_page' => 'guide_page',
        ],
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False,
    1,
    ''
  );

  createField(
    'field_parent_box',
    'node',
    'guide_item',
    'Parent node',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_box' => 'guide_box',
        ],
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False,
    1,
    ''
  );

  createField(
    'field_parent_item',
    'node',
    'guide_html_item',
    'Parent node',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_item' => 'guide_item',
        ],
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False,
    1,
    ''
  );

  createField(
    'field_parent_item',
    'node',
    'guide_book_item',
    'Parent node',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_item' => 'guide_item',
        ],
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False,
    0,
    ''
  );



//add page description field
  createField(
    'field_description',
    'node',
    'guide_page',
    'Description',
    'text_long',
    [],
    [],
    'text_textarea',
    ['rows' => 5, 'placeholder' => 'Enter the page description here...'],
    TRUE,
    False,
    2,
    ''
  );

  createField(
    'field_draft_mode',
    'node',
    'guide_page',
    'Draft Mode',
    'boolean',
    [],
    [],
    'boolean_checkbox',
    [ // Widget settings.
      'settings' => [
        'display_label' => TRUE,
      ],
    ],
    FALSE,
    FALSE,
    10,
    ''
  );



  createField(
    'field_description',
    'node',
    'guide_item',
    'Description',
    'text_long',
    [],
    [],
    'text_textarea',
    ['rows' => 5, 'placeholder' => 'Enter the page description here...'],
    TRUE,
    False,
    3,
    ''
  );

// page box children
  createField(
    'field_child_boxes',
    'node',
    'guide_page',
    'Children Boxes',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_box' => 'guide_box',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    TRUE,
    5,
    ''
  );

  createField(
    'field_child_pages',
    'node',
    'guide_page',
    'Children Pages',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_page' => 'guide_page',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    TRUE,
    5,
    ''
  );

  createField(
    'field_reference_node',
    'node',
    'guide_page',
    'Reference To',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_page' => 'guide_page',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False,
    5,
    ''
  );

  createField(
    'field_child_pages',
    'node',
    'guide',
    'Children Pages',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_page' => 'guide_page',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    TRUE,
    6,
    ''
  );

  createField(
    'field_text_box_item2',
    'node',
    'guide_html_item',
    'Text',
    'text_long',
    [],
    [],
    'text_textarea',
    ['rows' => 20,],
    TRUE,
    False,
    1,
    ''
  );

  createField(
    'field_html_item',
    'node',
    'guide_item',
    'html item',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_html_item' => 'guide_html_item',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    True,
    4,
    ''
  );

  createField(
    'field_database_item',
    'node',
    'guide_item',
    'Database item',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_database_item' => 'guide_database_item',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    True,
    4,
    ''
  );

//guide_item
  createField(
    'field_box_items',
    'node',
    'guide_box',
    'Items List',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_item' => 'guide_item',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    True,
    4,
    ''
  );

  // Guide box children
  createField(
    'field_child_boxes',
    'node',
    'guide',
    'Children Boxes',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_box' => 'guide_box',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    TRUE,
    7,
    ''
  );

  // Guide page children
  createField(
    'field_child_pages',
    'node',
    'guide',
    'Children Pages',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_page' => 'guide_page',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    TRUE,
    6,
    ''
  );

  createField(
    'field_hide_description',
    'node',
    'guide',
    'Hide Description',
    'boolean',
    [],
    [
      'default_value' => 0,
      'on_label' => 'Yes',
      'off_label' => 'No',
    ],
    'boolean_checkbox',
    [],
    TRUE,
    1,
    1,
    ''
  );

  createField(
    'field_hide_description',
    'node',
    'guide_page',
    'Hide Description',
    'boolean',
    [],
    [
      'default_value' => 0,
      'on_label' => 'Yes',
      'off_label' => 'No',
    ],
    'boolean_checkbox',
    [],
    TRUE,
    1,
    1,
    ''
  );

  createField(
    'field_database_link',
    'node',
    'guide_database_item',
    'proxied Link',
    'link',
    [],
    ['link_type' => LinkItemInterface::LINK_GENERIC],
    'link_default',
    [],
    TRUE,
    FALSE,
    0,
    'Enter the Title of the proxied content. All links in this field will have a proxy prefix attached to the url by the system (eg. https://proxy.library.xxx.xx/login?url=). so enter the URL of the content without the proxy.'
  );

  createField(
    'field_database_body',
    'node',
    'guide_database_item',
    'Body',
    'text_long',
    [],
    ['text_processing' => 1],
    'text_textarea',
    [],
    TRUE,
    FALSE,
    1,
    ''
  );

  createField(
    'field_db_guide_subject',
    'node',
    'guide_database_item',
    'Subject',
    'entity_reference',
    ['target_type' => 'taxonomy_term',],
    ['handler' => 'default:taxonomy_term',
      'handler_settings' => [
        'target_bundles' => [
          'LGMS_Guide_Subject' => 'LGMS_Guide_Subject',
        ],
      ],
    ],
    'options_buttons',
    [],
    False,
    True,
    3,
    ''
  );

  // First Name
  createField(
    'field_lgms_first_name',
    'user',
    'user',
    'First Name',
    'string',
    [],
    [],
    'string_textfield',
    ['size' => 20],
    TRUE,
    FALSE,
    1,
    'The user\'s first name.'
  );

  // Last Name
  createField(
    'field_lgms_last_name',
    'user',
    'user',
    'Last Name',
    'string',
    [],
    [],
    'string_textfield',
    ['size' => 20],
    TRUE,
    FALSE,
    2,
    'The user\'s last name.'
  );

  // Phone Number
  createField(
    'field_lgms_phone_number',
    'user',
    'user',
    'Phone Number',
    'string',
    [],
    [],
    'string_textfield',
    ['size' => 20],
    TRUE,
    FALSE,
    3,
    'The user\'s phone number.'
  );

  // Body
  createField(
    'field_lgms_body',
    'user',
    'user',
    'Body',
    'text_long',
    [],
    [],
    'text_textarea',
    [],
    TRUE,
    FALSE,
    3,
    'The user\'s custom body.'
  );

  createField(
    'field_media_image',
    'node',
    'guide_item',
    'Media',
    'entity_reference',
    ['target_type' => 'media'],
    [
      'handler' => 'default:media',
      'handler_settings' => [
        'sort' => ['field' => '_none'],
      ],
    ],
    'media_library_widget',
    [],
    TRUE,
    false,
    0,
    ''
  );

  createField(
    'field_book_item',
    'node',
    'guide_item',
    'Book item',
    'entity_reference',
    ['target_type' => 'node',],
    ['handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'guide_book_item' => 'guide_book_item',
        ],
      ],
      'sort' => [
        'field' => '_none',
      ],
    ],
    'entity_reference_autocomplete',
    [],
    TRUE,
    True,
    4,
    ''
  );

  createField(
    'field_book_author_or_editor',
    'node',
    'guide_book_item',
    'Author/Editor',
    'string',
    [],
    [],
    'string_textfield',
    [],
    TRUE,
    FALSE,
    1,
    ''
  );

  createField(
    'field_book_publisher',
    'node',
    'guide_book_item',
    'Publisher',
    'string',
    [],
    [],
    'string_textfield',
    [],
    TRUE,
    FALSE,
    2,
    ''
  );

  createField(
    'field_book_year',
    'node',
    'guide_book_item',
    'Year',
    'string',
    [],
    [],
    'string_textfield',
    [],
    TRUE,
    FALSE,
    3,
    ''
  );

  createField(
    'field_make_proxy',
    'node',
    'guide_database_item',
    'Include Proxy',
    'boolean',
    [],
    [],
    'boolean_checkbox',
    [ // Widget settings.
      'settings' => [
        'display_label' => TRUE,
      ],
    ],
    FALSE,
    FALSE,
    1,
    ''
  );


  createField(
    'field_book_edition',
    'node',
    'guide_book_item',
    'Edition',
    'string',
    [],
    [],
    'string_textfield',
    [],
    TRUE,
    FALSE,
    4,
    ''
  );

  createField(
    'field_book_cover_picture',
    'node',
    'guide_book_item',
    'Cover Picture',
    'image',
    ['uri_scheme' => 'public', 'file_extensions' => 'png jpg jpeg'],
    [],
    'image_image',
    ['progress_indicator' => 'throbber'],
    TRUE,
    FALSE,
    5,
    ''
  );

  createField(
    'field_book_url',
    'node',
    'guide_book_item',
    'URL',
    'link',
    [],
    ['link_type' => LinkItemInterface::LINK_GENERIC],
    'link_default',
    [],
    TRUE,
    FALSE,
    6,
    ''
  );

  createField(
    'field_book_description',
    'node',
    'guide_book_item',
    'Description',
    'text_long',
    [],
    [],
    'text_textarea',
    ['rows' => 20,],
    TRUE,
    FALSE,
    7,
    ''
  );

  // Create a new Guide Subject taxonomy.
  create_vocab('LGMS_Guide_Book_Type', 'Guide Book Type', 'Use Guide Book Type to add extra fields to Book content type');

  // Add terms to the Guide Group taxonomy
  $terms = array(
    'print',
    'eBook',
  );

  add_terms($terms, 'LGMS_Guide_Book_Type');

  // Create field storages and instances...
  createField(
    'field_book_type',
    'node',
    'guide_book_item',
    'Type',
    'entity_reference',
    ['target_type' => 'taxonomy_term',],
    ['handler' => 'default:taxonomy_term',
      'handler_settings' => [
        'target_bundles' => [
          'LGMS_Guide_Book_Type' => 'LGMS_Guide_Book_Type',
        ],
      ],
    ],
    'options_select',
    [],
    False,
    False,
    8,
    ''
  );


  createField(
    'field_book_call_number',
    'node',
    'guide_book_item',
    'Call Number',
    'string',
    [],
    [],
    'string_textfield',
    [],
    TRUE,
    FALSE,
    9,
    ''
  );

  createField(
    'field_book_location',
    'node',
    'guide_book_item',
    'Location',
    'string',
    [],
    [],
    'string_textfield',
    [],
    TRUE,
    FALSE,
    10,
    ''
  );

  createField(
    'field_book_cat_record',
    'node',
    'guide_book_item',
    'Cat Record',
    'link',
    [],
    ['link_type' => LinkItemInterface::LINK_GENERIC],
    'link_default',
    [],
    TRUE,
    FALSE,
    11,
    ''
  );

  createField(
    'field_book_pub_finder',
    'node',
    'guide_book_item',
    'Pub Finder',
    'link',
    [],
    ['link_type' => LinkItemInterface::LINK_GENERIC],
    'link_default',
    [],
    TRUE,
    FALSE,
    12,
    ''
  );

  // Disable the display of author and date information for guide, guide_page and guide_box.
  disable_field('guide', 'display_submitted');
  disable_field('guide_page', 'display_submitted');
  disable_field('guide_box', 'display_submitted');
  disable_field('guide_database_item', 'display_submitted');
  disable_field('guide_book_item', 'display_submitted');
}

/**
 * Implements hook_entity_presave().
 */
function lgmsmodule_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof NodeInterface && $entity->bundle() == 'guide_database_item') {
    // Load the proxy prefix setting.
    $proxy_prefix = \Drupal::config('lgmsmodule.settings')->get('proxy_prefix');

    // Check if the 'field_make_proxy' is checked and the field exists.
    if ($entity->hasField('field_make_proxy') && $entity->get('field_make_proxy')->value && $entity->hasField('field_database_link')) {
      $items = $entity->get('field_database_link');
      foreach ($items as $item) {
        // Get the current value of the URL.
        $current_value = $item->uri;
        // If the proxy prefix is not already there, prepend it.
        if ($current_value !== NULL && strpos($current_value, $proxy_prefix) !== 0) {
          $item->uri = $proxy_prefix . $current_value;
        }
      }
    } elseif ($entity->hasField('field_database_link')) {
      // If the 'field_make_proxy' is not checked, ensure the proxy prefix is not there.
      $items = $entity->get('field_database_link');
      foreach ($items as $item) {
        // Get the current value of the URL.
        $current_value = $item->uri;
        // If the proxy prefix is there, remove it.
        if ($current_value !== NULL && strpos($current_value, $proxy_prefix) === 0) {
          $item->uri = substr($current_value, strlen($proxy_prefix));
        }
      }
    }
  }
}


/**
 * Custom validation handler for the page creation form.
 */
function lgmsmodule_page_form_validate($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $reference = $form_state->getValue('field_reference_node')[0]['target_id'];

  if(!empty($reference)){
    $node = $form_state->getFormObject()->getEntity();

    $hasChangesOtherThanChildPages = FALSE;

    if ($node->label() != $form_state->getValue('title')[0]['value']) {
      $hasChangesOtherThanChildPages = TRUE;
    }

    if ($node->get('field_description')->value != $form_state->getValue('field_description')[0]['value']) {
      $hasChangesOtherThanChildPages = TRUE;
    }

    if ($node->get('field_parent_guide')->target_id != $form_state->getValue('field_parent_guide')[0]['target_id']) {
      $hasChangesOtherThanChildPages = TRUE;
    }

    if ($node->isPublished() != $form_state->getValue('status')) {
      $form_state->setErrorByName('', t('1'));
      $hasChangesOtherThanChildPages = TRUE;
    }

    if ($node->get('field_reference_node')->target_id != $form_state->getValue('field_reference_node')[0]['target_id']) {
      $form_state->setErrorByName('', t('2'));
      $hasChangesOtherThanChildPages = TRUE;
    }

    if ($node->get('field_hide_description')->value != ($form_state->getValue('field_hide_description')['value'])) {
      $hasChangesOtherThanChildPages = TRUE;
    }

    /**To Do**/

    $original_child_boxes = $node->get('field_child_boxes')->referencedEntities();
    \Drupal::logger('my_module')->notice('<pre>' . print_r(count($original_child_boxes), TRUE) . '</pre>');
    \Drupal::logger('my_module')->notice('<pre>' . print_r(count($form_state->getValue('field_child_boxes')), TRUE) . '</pre>');
    for ($i = 0; $i < count($form_state->getValue('field_child_boxes')); $i++){
      if(empty($original_child_boxes[$i])){
        break;
      }

      $new_box = $form_state->getValue('field_child_boxes')[$i]['target_id'];
      \Drupal::logger('my_module')->notice('<pre>' . print_r($new_box, TRUE) . '</pre>');
      \Drupal::logger('my_module')->notice('<pre>' . print_r($original_child_boxes[$i]->id(), TRUE) . '</pre>');

      if($original_child_boxes[$i]->id() != $new_box){
        $hasChangesOtherThanChildPages = TRUE;
        break;
      }
    }

    if (count($original_child_boxes) != count($form_state->getValue('field_child_boxes'))) {
      $hasChangesOtherThanChildPages = TRUE;
    }

    if ($hasChangesOtherThanChildPages) {
      $form_state->setErrorByName('', t('You can only change the child pages of this node.'));
    }

  }

  $parent_guide_value = $form_state->getValue('field_parent_guide');

  if (!empty($parent_guide_value)) {
    // Assuming the field is an entity reference, the target_id is the referenced entity ID.
    $parent_entity_id = $parent_guide_value[0]['target_id'];
    // Load the referenced entity.
    $parent_entity = Node::load($parent_entity_id);

    // Check if the parent entity is a page
    if ($parent_entity && $parent_entity->bundle() == 'guide_page') {
      // Set an error if the referenced entity is not a guide.
      if ($parent_entity->get('field_parent_guide')->entity->bundle() == 'guide_page'){
        $form_state->setErrorByName('field_parent_guide', t('The parent node Can not be a subpage.'));
      }

      $child_pages_values = $form_state->getValue('field_child_pages');
      $has_children = FALSE;

      foreach ($child_pages_values as $child_page_value) {
        // Check if 'target_id' is not empty.
        if (is_array($child_page_value) && !empty($child_page_value['target_id'])) {
          $has_children = TRUE;
          break; // No need to continue checking once a child page is found.
        }
      }

      // Set the error if $has_children is true.
      if ($has_children) {
        $form_state->setErrorByName('field_child_pages', t('This page can not have subPages.'));
      }

    }
  }

  $child_pages_values = $form_state->getValue('field_child_pages');

  foreach ($child_pages_values as $index => $child_page_value) {
    //\Drupal::logger('my_module')->notice('<pre>' . print_r($child_page_value, TRUE) . '</pre>');
    if (is_array($child_page_value) && !empty($child_page_value['target_id'])) {
      $child_page_id = $child_page_value['target_id'];
      $child_page = Node::load($child_page_id);

      if($child_page->hasField('field_child_pages') && !empty($child_page->get('field_child_pages')->getValue())){
        $form_state->setErrorByName("field_child_pages][$index", t('A subPage cannot have child pages.'));
      }
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter() for node edit forms.
 */
function lgmsmodule_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  if ($node instanceof NodeInterface && $node->bundle() === 'guide_page')
    $form['#validate'][] = 'lgmsmodule_page_form_validate';

  // Check if the form is for a 'guide_database_item' node type.
  if ($node instanceof NodeInterface && $node->bundle() === 'guide_database_item') {
    // Load the proxy prefix setting.
    $proxy_prefix = \Drupal::config('lgmsmodule.settings')->get('proxy_prefix');

    $make_proxy = $node->get('field_make_proxy')->value;

    // Check if the field exists in the form and if the checkbox is checked.
    if (isset($form['field_database_link']) && $make_proxy) {
      $fieldWidget = &$form['field_database_link']['widget'];
      foreach (Element::children($fieldWidget) as $delta) {
        if (isset($fieldWidget[$delta]['uri']['#default_value'])) {
          $current_value = $fieldWidget[$delta]['uri']['#default_value'];
          // Ensure $current_value is a string before calling strpos().
          if (!is_null($current_value) && strpos((string) $current_value, $proxy_prefix) !== 0) {
            // Prepend the proxy prefix to the URL if not already there.
            $fieldWidget[$delta]['uri']['#default_value'] = $proxy_prefix . $current_value;
          }
        }
      }
    } else if (isset($form['field_database_link']) && !$make_proxy) {
      $fieldWidget = &$form['field_database_link']['widget'];
      foreach (Element::children($fieldWidget) as $delta) {
        if (isset($fieldWidget[$delta]['uri']['#default_value'])) {
          $current_value = $fieldWidget[$delta]['uri']['#default_value'];
          // If the proxy prefix is present, remove it.
          if (!is_null($current_value) && strpos((string) $current_value, $proxy_prefix) === 0) {
            $new_value = substr($current_value, strlen($proxy_prefix));
            $fieldWidget[$delta]['uri']['#default_value'] = $new_value;
          }
        }
      }
    }
  }
}

function update_referencing_guide_pages($updated_guide_page) {
  $updated_guide_page_id = $updated_guide_page->id();

  // Query to find all guide pages that reference the updated guide page.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'guide_page')
    ->condition('field_reference_node', $updated_guide_page_id)
    ->accessCheck(false);
  $result = $query->execute();

  // Load and update the referencing guide pages.
  if (!empty($result)) {
    $referencing_guide_pages = Node::loadMultiple($result);

    foreach ($referencing_guide_pages as $guide_page) {
      \Drupal::logger('my_module')->notice('<pre>' . print_r($guide_page->id(), TRUE) . '</pre>');
      $guide_page->set('title', $updated_guide_page->label());
      $guide_page->set('field_description', $updated_guide_page->get('field_description')->value);
      $guide_page->set('field_child_boxes', $updated_guide_page->get('field_child_boxes')->referencedEntities());
      $guide_page->set('field_hide_description', $updated_guide_page->get('field_hide_description')->value == '0');
      $guide_page->set('status', $updated_guide_page->isPublished());

      $guide_page->save();
    }
  }
}

/**
 * @throws EntityStorageException
 */
function disable_field($id, $field): void
{
  // Load the content type
  $content_type = NodeType::load($id);
  if ($content_type) {
    // Disable the field
    $content_type->set($field, FALSE);
    $content_type->save();
  }
}


/**
 * Implements hook_uninstall().
 * @throws EntityStorageException
 */
function lgmsModule_uninstall(): void
{
  // Delete the Guide Type taxonomy vocabulary and its terms.
  delete_taxonomies('LGMS_Guide_Type');

  // Delete the Guide Subject taxonomy vocabulary and its terms.
  delete_taxonomies('LGMS_Guide_Subject');

  // Delete the Guide Group taxonomy vocabulary and its terms.
  delete_taxonomies('LGMS_Guide_Group');

  // Delete the Guide Book Type vocabulary and its terms.
  delete_taxonomies('LGMS_Guide_Book_Type');

  // Delete field storages.
  delete_field_storage('field_lgms_guide_subject');
  delete_field_storage('field_lgms_guide_type');
  delete_field_storage('field_lgms_guide_group');
  delete_field_storage('field_lgms_guide_subject');
  delete_field_storage('field_lgms_guide_type');
  delete_field_storage('field_lgms_guide_group');
  delete_field_storage('field_guide_description');
  delete_field_storage('field_parent_guide');
  delete_field_storage('field_parent_node');
  delete_field_storage('field_description');
  delete_field_storage('field_text_box_item');
  delete_field_storage('field_database_link');
  delete_field_storage('field_database_body');
  delete_field_storage('field_lgms_first_name');
  delete_field_storage('field_lgms_last_name');
  delete_field_storage('field_lgms_phone_number');
  delete_field_storage('field_db_guide_subject');
  delete_field_storage('field_book_author_or_editor');
  delete_field_storage('field_book_publisher');
  delete_field_storage('field_book_year');
  delete_field_storage('field_book_edition');
  delete_field_storage('field_book_cover_picture');
  delete_field_storage('field_book_url');
  delete_field_storage('field_book_description');
  delete_field_storage('field_book_type');
  delete_field_storage('field_book_call_number');
  delete_field_storage('field_book_location');
  delete_field_storage('field_book_cat_record');
  delete_field_storage('field_book_pub_finder');
  delete_field_storage('field_book_item');

  $content_type = NodeType::load('guide');
  $content_type?->delete();

  $content_type = NodeType::load('guide_page');
  $content_type?->delete();

  $content_type = NodeType::load('guide_box');
  $content_type?->delete();


  $content_type = NodeType::load('guide_item');
  $content_type?->delete();

  $content_type = NodeType::load('guide_html_item');
  $content_type?->delete();

  $content_type = NodeType::load('guide_database_item');
  $content_type?->delete();

  $content_type = NodeType::load('guide_book_item');
  $content_type?->delete();

  $view_id = 'lgms_databases';
  $view = View::load($view_id);
  $view?->delete();

  $view_id = 'lgms_all_guides_table';
  $view = View::load($view_id);
  $view?->delete();

  $view_id = 'lgms_dashboard_table';
  $view = View::load($view_id);
  $view?->delete();
}

/**
 * Deletes a Taxonomy and its terms.
 * @throws EntityStorageException
 */
function delete_taxonomies($vocab_machine_name): void
{
  $vocabulary = Vocabulary::load($vocab_machine_name);
  if ($vocabulary) {
    try {
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['vid' => $vocab_machine_name]);

      foreach ($terms as $term) {
        $term->delete();
      }
    } catch (InvalidPluginDefinitionException|PluginNotFoundException $e) {
    }
    $vocabulary->delete();
  }
}

/**
 * Deletes storage Fields
 * @throws EntityStorageException
 */
function delete_field_storage($field_storage_name): void
{
  $field_storage = FieldStorageConfig::load($field_storage_name);
  $field_storage?->delete();
}
