<?php
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;

use Drupal\lgmsmodule\Controller\landingPageHelper;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Field\FieldStorageDefinitionInterface;

/**
 * Implements hook_theme().
 */
function lgmsmodule_theme($existing, $type, $theme, $path) {
  return [
    'lgmsmodule_content' => [
      'variables' => ['table' => NULL],
      'template' => 'lgmsmodule-content',
    ],
  ];
}

/**
 * Implements hook_block_access().
 */
function lgmsmodule_block_access(\Drupal\block\BlockInterface $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
  // Get the current route.
  $current_route = \Drupal::routeMatch()->getRouteName();
  $node = \Drupal::routeMatch()->getParameter('node');
  $routes = [
    'entity.node.edit_form',
    'entity.node.delete_form',
    'entity.node.version_history',
    'entity.node.devel_load',
    'entity.node.devel_load_with_references',
    'entity.node.devel_render',
    'entity.node.devel_definition',
  ];


  // Check if the current route is for a node edit form.
  if ($node && $node->getType() == 'guide' && in_array($current_route, $routes) && $block->id() === 'lgmsguideownerblock') {
    // Block access to the block on node edit pages.
    return \Drupal\Core\Access\AccessResult::forbidden();
  }

  // Allow access to the block for other routes.
  return \Drupal\Core\Access\AccessResult::allowed();
}

/**
 * Implements hook_preprocess_page().
 */
function lgmsmodule_preprocess_page(&$variables) {
  // Check if the current page is a guide node
  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    if ($node->getType() == 'guide') {
      $variables['#attached']['library'][] = 'lgmsmodule/lgmsmodule';
    }
  }
}

/**
 * Creates a taxonomy vocabulary if it doesn't already exist.
 *
 * @param string $vid The machine name of the vocabulary.
 * @param string $name The human-readable name of the vocabulary.
 * @param string $description The description of the vocabulary.
 * @return void
 * @throws EntityStorageException
 */
function create_vocab(string $vid, string $name, string $description): void {
  $vocabulary = Vocabulary::create([
    'vid' => $vid,
    'name' => $name,
    'description' => $description,
  ]);
  $vocabulary->save();
}


/**
 * Adds terms to a taxonomy vocabulary if they don't already exist.
 *
 * @param array $terms The terms to add.
 * @param string $vid The machine name of the vocabulary.
 * @return void
 * @throws EntityStorageException
 */
function add_terms(array $terms, string $vid): void {
  foreach ($terms as $term_name) {
    $new_term = Term::create([
      'vid' => $vid,
      'name' => $term_name,
    ]);
    $new_term->enforceIsNew();
    $new_term->save();
  }
}


/**
 * Helper function to create content types.
 * @throws EntityStorageException
 */
function createContentType($id, $name): void
{
  $type = NodeType::load($id);
  if (!$type) {
    $type = NodeType::create([
      'type' => $id,
      'name' => $name,
    ]);
    $type->save();
  }
}

/**
 * Helper function to create fields.
 * @throws EntityStorageException
 */
function createField($field_id, $entity_type, $bundle, $field_name, $field_type, $settings, $widget_type, $widget_settings, $status, $cardinal): void
{
  // Create field storage.
  $storage = FieldStorageConfig::loadByName($entity_type, $field_id);
  if (!$storage) {
    $storage = FieldStorageConfig::create([
      'field_name' => $field_id,
      'entity_type' => $entity_type,
      'type' => $field_type,
      'settings' => $settings['storage'] ?? [],
    ]);

    if ($cardinal){
      $storage->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
    }

    $storage->save();
  }

  // Create field.
  $field = FieldConfig::loadByName($entity_type, $bundle, $field_id);
  if (!$field) {
    $field = FieldConfig::create([
      'field_storage' => $storage,
      'bundle' => $bundle,
      'label' => $field_name,
      'settings' => $settings['field'] ?? [],
    ]);
    $field->save();

    // Configure form display.
    $form_display = EntityFormDisplay::load($entity_type . '.' . $bundle . '.default');
    if (!$form_display) {
      $form_display = EntityFormDisplay::create([
        'targetEntityType' => $entity_type,
        'bundle' => $bundle,
        'mode' => 'default',
        'status' => TRUE,
      ]);
    }
    $form_display->setComponent($field_id, [
      'type' => $widget_type,
      'settings' => $widget_settings,
    ])->save();

    // Configure view display.
    $view_display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.default');
    if (!$view_display) {
      $view_display = EntityViewDisplay::create([
        'targetEntityType' => $entity_type,
        'bundle' => $bundle,
        'mode' => 'default',
        'status' => TRUE,
      ]);
    }

    // Remove the field from the view display.
    if ($view_display->getComponent($field_id)) {
      $view_display->removeComponent($field_id);
      $view_display->save();
    }
  }
}

/**
 * This is executed when a node is created
 * Implements hook_node_insert().
 */
function lgmsmodule_node_insert(NodeInterface $node): void
{
  lgmsmodule_refresh_cache($node);
}

/**
 * This is executed when a node is updated
 * Implements hook_node_update().
 */
function lgmsmodule_node_update(NodeInterface $node): void
{
  lgmsmodule_refresh_cache($node);
}

/**
 * Helper function to refresh cache.
 */
function lgmsmodule_refresh_cache(NodeInterface $node): void
{
  if ($node->bundle() === 'guide_box') {
    // Get the 'parent_page' ID from the 'guide_box'
    $parent_page_id = $node->get('field_parent_page')->target_id;

    // Clear the cache of the page
    if ($parent_page_id) {
      $custom_cache_tag = 'lgmsmodule_node_view:' . $parent_page_id;
      \Drupal::service('cache_tags.invalidator')->invalidateTags([$custom_cache_tag]);
    }

    // Clear the cache of the guide
    $parent_page = Node::load($parent_page_id);
    lgmsmodule_refresh_cache($parent_page);
  } elseif ($node->bundle() === 'guide_page') {
    // Invalidate cache for 'guide_page' as before
    $parent_guide_id = $node->get('field_parent_guide')->target_id;

    if ($parent_guide_id) {
      $custom_cache_tag = 'lgmsmodule_node_view:' . $parent_guide_id;
      \Drupal::service('cache_tags.invalidator')->invalidateTags([$custom_cache_tag]);
    }
  }
}


/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function lgmsmodule_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if (($entity->bundle() === 'guide' || $entity->bundle() === 'guide_page') && $view_mode === 'full') {
    $build['#attached']['library'][] = 'lgmsmodule/lgmsmodule';
    $build['#attached']['library'][] = 'core/drupal.dialog.ajax';

    // Add a custom cache tag to the build array
    $custom_cache_tag = 'lgmsmodule_node_view:' . $entity->id();
    $build['#cache']['tags'][] = $custom_cache_tag;


    $page = null;

    // Check if it's a guide page.
    if($entity->bundle() === 'guide') {
      $build['desc'] = ['#markup' => $entity->get("field_guide_description")->value,];

      // Get the list of guide pages
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'guide_page')
        ->condition('field_parent_guide', $entity->id())
        ->accessCheck(TRUE);
      $result = $query->execute();

      if (empty($result)) { /**This Should change to redirecting to create a page*/
        $url = Url::fromRoute('node.add', ['node_type' => 'guide_page'], ['query' => ['field_parent_page' => $entity->id()]]);
        $link = Link::fromTextAndUrl(t('Create Guide Page'), $url)->toRenderable();
        $link['#attributes']['class'][] = 'link';
        $build['add_guide_page_box_link'] = $link;
        return;
      }

      // Get the first page
      $first_node_id = reset($result);
      $page = Node::load($first_node_id);
    }

    if($page === null){
      $page = $entity;
    }

    if($page instanceof NodeInterface){
      $build['guide_pages_list'] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['guide-pages-list']],
      ];

      $query = \Drupal::entityQuery('node')
        ->condition('type', 'guide_box')
        ->condition('field_parent_page', $page->id())
        ->accessCheck(TRUE);
      $result = $query->execute();

      if (!empty($result)) {
        $guide_boxes = Node::loadMultiple($result);

        $orderedBoxes = [];
        foreach ($guide_boxes as $guide_box) {
          if ($guide_box->hasField('field_body_box') && !$guide_box->get('field_body_box')->isEmpty() && $guide_box->hasField('field_box_weight')) {
            $weight = $guide_box->get('field_box_weight')->isEmpty() ? 1000 : $guide_box->get('field_box_weight')->value;
            $orderedBoxes[$guide_box->id()] = ['weight' => $weight, 'data' => $guide_box];
          }
        }

        // Sort the guide boxes by weight.
        uasort($orderedBoxes, function($a, $b) {
          return $a['weight'] <=> $b['weight'];
        });

        foreach ($orderedBoxes as $guide_box_data) {
          $guide_box = $guide_box_data['data'];

          $build['boxes'][] = [
            '#type' => 'container',
            '#attributes' => ['class' => ['guide-box-container']],
            'title' => [
              '#type' => 'html_tag',
              '#tag' => 'h2',
              '#value' => $guide_box->label(),
              '#attributes' => ['class' => ['guide-box-title']],
            ],
            'body' => [
              '#type' => 'processed_text',
              '#text' => $guide_box->get('field_body_box')->value,
              '#format' => $guide_box->get('field_body_box')->format,
              '#attributes' => ['class' => ['guide-box-body']],
            ],
          ];
        }
      }

      $build['two_column_layout']['right']['add_guide_page_box_link'] = createBoxButton($entity);
    }
  }
}

function createBoxButton($node): array
{
  $url = Url::fromRoute('custom_guide_box.form', [], ['query' => ['current_node' => $node->id()]]);
  $link = Link::fromTextAndUrl(t('Create Guide Box'), $url)->toRenderable();
  $link['#attributes'] = [
    'class' => ['use-ajax'],
    'data-dialog-type' => 'modal',
    'data-dialog-options' => Json::encode(['width' => 800]),
  ];

  return $link;
}


/**
 * Implements hook_install().
 * @throws EntityStorageException
 */
function lgmsModule_install(): void
{
  // Create content types.
  createContentType('guide_page', 'Guide Page');
  createContentType('guide_box', 'Guide Box');

  // Create a new Guide Type taxonomy.
  create_vocab('LGMS_Guide_Type', 'Guide Type', 'Use Guide Type to group guides by their type');

  // Add terms to the Guide Type taxonomy
  $terms = array(
    'General purpose Guide',
    'Subject Guide',
    'Topic Guide',
    'Course Guide',
  );
  add_terms($terms, 'LGMS_Guide_Type');

  // Create a new Guide Subject taxonomy.
  create_vocab('LGMS_Guide_Subject', 'Guide Subject', 'Use Guide Subject to group guides related to each other under the same category');

  // Add terms to the Guide Subject taxonomy
  $terms = array(
    'Anthropology',
    'Biology ',
    'Biotechnology',
    'Business & Management',
    'Chemistry',
    'Communication & Mass Media',
    'Computer Science',
    'Drama & Theater Arts',
    'Earth & Atmospheric Sciences',
    'Economics',
    'Education',
    'Engineering',
    'Environmental Sciences',
    'Ethnic & Cultural Studies',
    'Geography & Cartography',
    'Health & Medicine',
    'History',
    'Language & Linguistics',
    'Law',
    'Library & Information Science',
    'Literature & Writing',
    'Marketing',
    'Mathematics',
    'Music',
    'Nursing & Allied Health',
    'Nutrition & Dietetics',
    'Physics',
    'Political Science',
    'Politics & Government',
    'Psychology',
    'Religion & Philosophy',
    'Science',
    'Sociology',
    'Sports & Leisure',
    'Sports Medicine',
    'Veterinary Medicine',
    'Visual Arts',
    'Women\'s Studies & Feminism',
  );
  add_terms($terms, 'LGMS_Guide_Subject');

  // Create a new Guide Group taxonomy.
  create_vocab('LGMS_Guide_Group', 'Guide Group', 'Use Guide Group to assign a guide to a specific group and.');

  // Add terms to the Guide Group taxonomy
  $terms = array(
    'Group 1',
    'Group 2',
    'Group 3',
    'Group 4',
  );
  add_terms($terms, 'LGMS_Guide_Group');

  // Create field storages and instances...
  createField(
    'field_lgms_guide_subject',
    'node',
    'guide',
    'Subject',
    'entity_reference',
    [
      'storage' => ['target_type' => 'taxonomy_term',],
      'field' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'LGMS_Guide_Subject' => 'LGMS_Guide_Subject',
          ],
        ],
      ]
    ],
    'options_buttons',
    ['weight' => 0],
    False,
    True
  );

  createField(
    'field_lgms_guide_type',
    'node',
    'guide',
    'Type',
    'entity_reference',
    [
      'storage' => ['target_type' => 'taxonomy_term',],
      'field' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'LGMS_Guide_Type' => 'LGMS_Guide_Type',
          ],
        ],
      ]
    ],
    'options_select',
    ['weight' => 1],
    False,
    False
  );

  createField(
    'field_lgms_guide_group',
    'node',
    'guide',
    'Group',
    'entity_reference',
    [
      'storage' => ['target_type' => 'taxonomy_term',],
      'field' => [
        'handler' => 'default:taxonomy_term',
        'handler_settings' => [
          'target_bundles' => [
            'LGMS_Guide_Group' => 'LGMS_Guide_Group',
          ],
        ],
      ]
    ],
    'options_select',
    ['weight' => 2],
    False,
    False
  );

  // Guide Description field
  createField(
    'field_guide_description',
    'node',
    'guide',
    'Description',
    'text_long',
    [],
    'text_textarea',
    [],
    False,
    False
  );

  // Add a reference field to Guide content type on Guide Page.
  createField(
    'field_parent_guide',
    'node',
    'guide_page',
    'Parent Guide',
    'entity_reference',
    ['target_type' => 'node', 'handler' => 'default:node', 'handler_settings' => ['target_bundles' => ['guide' => 'guide']]],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False
  );


  createField(
    'field_parent_page',
    'node',
    'guide_box',
    'Parent Page',
    'entity_reference',
    ['target_type' => 'node', 'handler' => 'default:node', 'handler_settings' => ['target_bundles' => ['target_bundles' => 'target_bundles']]],
    'entity_reference_autocomplete',
    [],
    TRUE,
    False
  );

  //add page description field
  createField(
    'field_description',
    'node',
    'guide_page',
    'Description',
    'text_long',
    [],
    'text_textarea',
    ['rows' => 5, 'placeholder' => 'Enter the page description here...'],
    TRUE,
    False
  );

  // Box Body field
  createField(
    'field_body_box',
    'node',
    'guide_box',
    'Body',
    'text_long',
    [],
    'text_textarea',
    ['rows' => 20,],
    TRUE,
    False
  );

  // Box Weight field
  createField(
    'field_box_weight',
    'node',
    'guide_box',
    'Weight',
    'integer',
    [],
    'number',
    ['placeholder' => 0],
    TRUE,
    False
  );

  // Disable the display of author and date information for guide, guide_page and guide_box.
  disable_field('guide', 'display_submitted');
  disable_field('guide_page', 'display_submitted');
  disable_field('guide_box', 'display_submitted');
}

/**
 * @throws EntityStorageException
 */
function disable_field($id, $field): void
{
  // Load the content type
  $content_type = NodeType::load($id);
  if ($content_type) {
    // Disable the field
    $content_type->set($field, FALSE);
    $content_type->save();
  }
}


/**
 * Implements hook_uninstall().
 * @throws EntityStorageException
 */
function lgmsModule_uninstall(): void
{
  // Delete the Guide Type taxonomy vocabulary and its terms.
  delete_taxonomies('LGMS_Guide_Type');

  // Delete the Guide Subject taxonomy vocabulary and its terms.
  delete_taxonomies('LGMS_Guide_Subject');

  // Delete the Guide Group taxonomy vocabulary and its terms.
  delete_taxonomies('LGMS_Guide_Group');

  // Delete field storages.
  delete_field_storage('field_lgms_guide_subject');
  delete_field_storage('field_lgms_guide_type');
  delete_field_storage('field_lgms_guide_group');
  delete_field_storage('field_lgms_guide_subject');
  delete_field_storage('field_lgms_guide_type');
  delete_field_storage('field_lgms_guide_group');
  delete_field_storage('field_guide_description');
  delete_field_storage('field_parent_guide');
  delete_field_storage('field_parent_page');
  delete_field_storage('field_description');
  delete_field_storage('field_body_box');
  delete_field_storage('field_box_weight');

  $content_type = NodeType::load('guide_page');
  $content_type?->delete();

  $content_type = NodeType::load('guide_box');
  $content_type?->delete();
}

/**
 * Deletes a Taxonomy and its terms.
 * @throws EntityStorageException
 */
function delete_taxonomies($vocab_machine_name): void
{
  $vocabulary = Vocabulary::load($vocab_machine_name);
  if ($vocabulary) {
    try {
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['vid' => $vocab_machine_name]);

      foreach ($terms as $term) {
        $term->delete();
      }
    } catch (InvalidPluginDefinitionException|PluginNotFoundException $e) {
    }
    $vocabulary->delete();
  }
}

/**
 * Deletes storage Fields
 * @throws EntityStorageException
 */
function delete_field_storage($field_storage_name): void
{
  $field_storage = FieldStorageConfig::load($field_storage_name);
  $field_storage?->delete();
}
